<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeeReindeer&#39;s blog</title>
    <link>https://leer.moe/</link>
    <description>Recent content on LeeReindeer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Feb 2021 18:36:15 +0800</lastBuildDate><atom:link href="https://leer.moe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>macOS 入门 😁</title>
      <link>https://leer.moe/2021/02/19/intro-macos/</link>
      <pubDate>Fri, 19 Feb 2021 18:36:15 +0800</pubDate>
      
      <guid>https://leer.moe/2021/02/19/intro-macos/</guid>
      <description>&lt;!-- 2020/08/30 --&gt;
&lt;blockquote&gt;
&lt;p&gt;去年八月份，头脑一热就买了台一直想要的 MacBook Pro。使用几个月后，记录一下从 &lt;a href=&#34;https://leer.moe/2019/06/25/install_manjaro/&#34;&gt;Manjaro&lt;/a&gt; 到 MacOS的差异和使用体验。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>分布式系统设计模式-综述</title>
      <link>https://leer.moe/2021/01/31/pattern_of_distribeted_system/</link>
      <pubDate>Sun, 31 Jan 2021 18:36:15 +0800</pubDate>
      
      <guid>https://leer.moe/2021/01/31/pattern_of_distribeted_system/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;分布式系统给软件开发出了个特别的难题。这些系统要求我们保存多个需要保持同步的数据副本。并且我们不能依赖于计算节点的稳定运行，网络延迟可以轻易地导致不一致。尽管如此，许多公司仍然依赖一系列的核心分布式系统，使用它们来解决数据存储、消息通信、系统管理和分布式算力的问题。这些系统使用类似的方案来解决它们面临的共同问题。为了更好得理解、交流和教授分布式系统设计，我们需要设计模式来达成这一目标，所以本文识别出这些解决方案并发展为一系列的设计模式。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>少消费，多创造，更快乐</title>
      <link>https://leer.moe/2020/12/16/consumer_less_create_more/</link>
      <pubDate>Wed, 16 Dec 2020 18:36:15 +0800</pubDate>
      
      <guid>https://leer.moe/2020/12/16/consumer_less_create_more/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://telegra.ph/Consume-Less-Create-More-Its-More-Fun-12-04&#34;&gt;Consume Less. Create More. It&amp;rsquo;s More Fun.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;翻译自Telegram CEO: Pavel Durov 的一篇文章。看过很多类似的议题，但都没有他看得那么深刻、宏大。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>「鼠疫」读后感</title>
      <link>https://leer.moe/2020/10/31/plague/</link>
      <pubDate>Sat, 31 Oct 2020 18:36:15 +0800</pubDate>
      
      <guid>https://leer.moe/2020/10/31/plague/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;如果有这样的机会，就让瘟疫彻底摧毁人类，在挫败的斗争中，在绵绵的绝望中，在无期的监禁中，在痛苦、羞愧和无聊中死去。这是最好的时代的最好的结局。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>「1984」读后感</title>
      <link>https://leer.moe/2020/08/17/doublethink/</link>
      <pubDate>Mon, 17 Aug 2020 22:47:12 +0800</pubDate>
      
      <guid>https://leer.moe/2020/08/17/doublethink/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;「双重思想」的追随者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他在想，他总是想，二加二既可以是三，也可以是四，也可以是五。他有另一个想法冒出来：「Freedom is the freedom to say two plus two equals four」&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MapReduce 6.824</title>
      <link>https://leer.moe/2020/05/19/6.824_mapreduce/</link>
      <pubDate>Tue, 19 May 2020 18:36:15 +0800</pubDate>
      
      <guid>https://leer.moe/2020/05/19/6.824_mapreduce/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;MapReduce Framework: Users define &lt;em&gt;map&lt;/em&gt; function that processes a key/value pair to generate a set of intermediate k/v pairs; A &lt;em&gt;reduce&lt;/em&gt; function that merge all intermediate k/v pairs associated with the same intermediate key.&lt;/p&gt;
&lt;p&gt;MapReduce Framework &lt;strong&gt;hides&lt;/strong&gt; the messy details of parallelization, fault-tolerance, data distribution and load balancing in a library.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>「罪与罚」读后感</title>
      <link>https://leer.moe/2020/05/10/crime_and_punishment/</link>
      <pubDate>Sun, 10 May 2020 18:41:16 +0800</pubDate>
      
      <guid>https://leer.moe/2020/05/10/crime_and_punishment/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;断断续续。三年。我读完了《罪与罚》。如释重负&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大学生拉斯科利尼科夫&lt;strong&gt;谋杀&lt;/strong&gt;了放高利贷的老太婆和她不幸的妹妹，对于杀死老太婆，只是杀死一只虱子；而对于老太婆的妹妹，拉斯科利尼科夫却说“就好像没有杀死过她一样”。这是谋杀，他（拉斯科利尼科夫）在经过一个月的思想斗争和策划之后，决定当一回“拿破仑”，杀死了老太婆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://leer.moe/about/</link>
      <pubDate>Sun, 10 May 2020 00:13:27 +0000</pubDate>
      
      <guid>https://leer.moe/about/</guid>
      <description>Hello, World (๑•́ ₃ •̀๑) GitHub: LeeReindeer Twitter: Reindeer000ooo Telegram: dig -t txt leer.moe LeeReindeer&amp;rsquo;s Chronicle 2014 First time touch the Internet 2016 Start leaning Java and Android by myself 2017 Major at CS 2020 Working&amp;hellip; Blog&amp;rsquo;s Log 2017-01-16 使用 GitHub page + hexo 搭建 域名 http://leezoom.xyz 使用 next 主题 2018-05-12 更换域名 https://leer.moe 2018-12-24 使用</description>
    </item>
    
    <item>
      <title>Human, Animal, Pandemic</title>
      <link>https://leer.moe/2020/04/10/pandemic/</link>
      <pubDate>Fri, 10 Apr 2020 13:36:12 +0000</pubDate>
      
      <guid>https://leer.moe/2020/04/10/pandemic/</guid>
      <description>&lt;h2 id=&#34;一&#34;&gt;一&lt;/h2&gt;
&lt;p&gt;脑中不时闪过一些话语碎片，想要记下来，手放在键盘上好像熄了火的车，思绪又飞走了。必须写下来，无人发现也好，是一种写作和表达的欲望。世界已经发生了太大的变化，故事就发生在现在，时时刻刻，上演在世界的每个角落。而我写下的只是双目所及，一些无力的修饰不必再堆叠了。我受够了竭尽所思想修辞的时刻，那么开始吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Final Project</title>
      <link>https://leer.moe/2019/12/26/final-project-codeflow/</link>
      <pubDate>Thu, 26 Dec 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/12/26/final-project-codeflow/</guid>
      <description>Convert Java code to flowchart Once I said to run C language on JVM as my final project, but find it meaningless and useless without making out any scene. During my internship in Pingan fu, I read the heavy and document-less Java code day by day and did the stuff on the test framework. One day, I was reading a code fragment about the accounting voucher using the cartesian set,</description>
    </item>
    
    <item>
      <title>谈谈知识的获取（上）</title>
      <link>https://leer.moe/2019/11/29/how2getknowledge/</link>
      <pubDate>Fri, 29 Nov 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/11/29/how2getknowledge/</guid>
      <description>&lt;p&gt;回想在学校的日子，每天每天似乎都在学习新知识，课堂上、教课书本里。而或许有一天你也会有和我一样的想法：“这些不是我想要的，我只是被迫接受，不得不接受啊”，这样的声音虽小，但也是“呐喊”了。我跟从内心，但又不得不得做出一副顺从的样子，把灌输进来的“知识”接受，考完试之后再排出体外。可这不影响，&lt;a href=&#34;https://quoteinvestigator.com/2010/09/25/schooling-vs-education/&#34; title=&#34;schooling vs education&#34;&gt;马克吐温&lt;/a&gt;有一句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t let your boy&amp;rsquo;s schooling interfere with his education.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>解决 git clone 缓慢的问题</title>
      <link>https://leer.moe/2019/10/26/reclone/</link>
      <pubDate>Sat, 26 Oct 2019 20:37:02 +0000</pubDate>
      
      <guid>https://leer.moe/2019/10/26/reclone/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;解决 GitHub 仓库 clone 缓慢或断连的问题&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Not Afraid</title>
      <link>https://leer.moe/2019/09/03/not-afraid/</link>
      <pubDate>Tue, 03 Sep 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/09/03/not-afraid/</guid>
      <description></description>
    </item>
    
    <item>
      <title>扫雷游戏中的算法：Union Find 和 Flood Fill</title>
      <link>https://leer.moe/2019/07/13/minesweeper/</link>
      <pubDate>Sat, 13 Jul 2019 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/07/13/minesweeper/</guid>
      <description>&lt;p&gt;讲讲我在实现扫雷游戏时用到的算法，包括 Knuth shuffle、Union Find 和 Flood Fill。&lt;/p&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://github.com/LeeReindeer/Emoji-Mines/releases&#34;&gt;GitHub&lt;/a&gt;下载体验，&lt;em&gt;Emoji Mines&lt;/em&gt; 是一年前就完成的作品。今天把雷生成的算法改了改，游戏体验变好许多，遂又向女胖友推销自己游戏（笑&lt;/p&gt;
&lt;p&gt;在阅读之前假设你已可以熟悉扫雷的游戏规则。为了方便描述，将扫雷游戏中的方块分为：空白方块（即周围都没有雷方块的方块）、数字方块和雷方块。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Manjaro安装小记&amp;使用体验</title>
      <link>https://leer.moe/2019/06/25/install_manjaro/</link>
      <pubDate>Tue, 25 Jun 2019 22:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/06/25/install_manjaro/</guid>
      <description>&lt;p&gt;5 月的时候，还记得那个夜晚，我激动得睡不着，因为安装了新的系统 Manjaro😂。现在已经使用了一个多月，体验很好，比垃圾 Windows 好是肯定的，比 Ubuntu 稳定，软件包更新也更快。感觉可以养老了，不想折腾。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RTOS设计与实现</title>
      <link>https://leer.moe/2019/05/12/ros/</link>
      <pubDate>Sun, 12 May 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/05/12/ros/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;介绍基于 AVR 的 RTOS 的设计和实现，名为 ROS。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/LeeReindeer/ROS&#34;&gt;GitHub 地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AbstractQueuedSynchronizer</title>
      <link>https://leer.moe/2019/04/25/java-concurrent-aqs/</link>
      <pubDate>Thu, 25 Apr 2019 19:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/04/25/java-concurrent-aqs/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;AQS 是用来构建锁和同步工具的基本框架。本文主要基于 AQS 作者 Doug Lea 的论文*&lt;a href=&#34;http://gee.cs.oswego.edu/dl/papers/aqs.pdf&#34;&gt;The java.util.concurrent Synchronizer Framework&lt;/a&gt;* 和 JDK 1.8 的文档。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leer.moe/2019/01/06/java-concurrent-toc/&#34;&gt;Java并发-目录&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>K-th 问题</title>
      <link>https://leer.moe/2019/04/17/k-th/</link>
      <pubDate>Wed, 17 Apr 2019 19:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/04/17/k-th/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在面试的时候碰到的问题，总结一下。这类问题有以下几种形式，但本质上是一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求第 k 个最大的数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lalor/article/details/7368438&#34;&gt;从一亿个数里找出最大的一百个&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中位数，即第 n / 2 最大的数&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来以第一个问题的形式来分析和编码，即 &amp;ldquo;求第 k 个最大的数&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Minecraft Modded Server</title>
      <link>https://leer.moe/2019/03/29/minecraft-moded-server/</link>
      <pubDate>Fri, 29 Mar 2019 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/03/29/minecraft-moded-server/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近搭建了一个 Minecraft &lt;a href=&#34;https://www.zhihu.com/question/54048310/answer/138606934&#34;&gt;Mod 服&lt;/a&gt;，
服务器地址可以加&lt;a href=&#34;https://t.me/joinchat/FY2yNRUiGLdrDrLZZXh3wQ&#34;&gt;Telegram群&lt;/a&gt;后获取😂&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Spring Security 架构</title>
      <link>https://leer.moe/2019/03/26/spring-security-architecture/</link>
      <pubDate>Tue, 26 Mar 2019 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/03/26/spring-security-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://spring.io/guides/topicals/spring-security-architecture/&#34;&gt;Spring Security Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>数据结构-二叉树</title>
      <link>https://leer.moe/2019/03/18/binary-tree/</link>
      <pubDate>Mon, 18 Mar 2019 15:49:47 +0000</pubDate>
      
      <guid>https://leer.moe/2019/03/18/binary-tree/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二叉树的&lt;strong&gt;第 i 层最多有$2^{i-1}$个节点&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;深度为 h 的二叉树最多有$2^h - 1$个节点&lt;/strong&gt;。定义根节点深度为1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$n_0$(度为 0 的节点，叶子节点)，$n_1$（度为 1 的节点），$n_2$（度为 2 的节点），有 $n_0 = n_2 + 1$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;n0+n1+n2-1 = 0*n0+1*n1+2*n2

n0 = n2+1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>单线程和多线程下的ConcurrentModificationException</title>
      <link>https://leer.moe/2019/03/11/concurrentmodificationexception/</link>
      <pubDate>Mon, 11 Mar 2019 22:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/03/11/concurrentmodificationexception/</guid>
      <description>这个寒假看的《Java并发编程实战》终于派上了用场，今天搬砖过程中遇到了ConcurrentModificationException，结果</description>
    </item>
    
    <item>
      <title>JPA、Hibernate、Spring Data JPA 傻傻分不清？</title>
      <link>https://leer.moe/2019/03/09/jpa-hibernate-spring-data-jpa/</link>
      <pubDate>Sat, 09 Mar 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/03/09/jpa-hibernate-spring-data-jpa/</guid>
      <description>JPA、Hibernate、Spring Data JPA 三者的联系和不同: Hibernate is a JPA implementation, while Spring Data JPA is a JPA Data Access Abstraction. With Spring Data, you may use Hibernate, Eclipse Link or any other JPA provider. 上面这张关系图展示了</description>
    </item>
    
    <item>
      <title>Grain重构记-UI</title>
      <link>https://leer.moe/2019/01/30/grain-refactor-2/</link>
      <pubDate>Wed, 30 Jan 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/30/grain-refactor-2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;距离上一篇文章，已有一段时间，最近事情比较多，好想静下心学习 😿 这篇就贴一贴海大助手的 UI，不多说了。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Grain重构记-API</title>
      <link>https://leer.moe/2019/01/16/grain-refactor-1/</link>
      <pubDate>Wed, 16 Jan 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/16/grain-refactor-1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Grain 是我大一自学 Android 时写的一个App，最终学校关闭服务器接口，卒。
最近发现了一个新的可用的&lt;a href=&#34;http://portal.zjou.edu.cn/index.portal&#34;&gt;网站&lt;/a&gt;，所以重构的时候到了，在框架的选择上我一直纠结是用 MVP 还是 MVVM，最后还是用了 MVVM 配合 Google 的 Jetpack，使用起来很奇妙，也有很多坑。&lt;/p&gt;
&lt;p&gt;目前 App 确定的几个功能是：查成绩、校园卡、借阅查询。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次我用的数据来源是学校的官网，可以在外网访问，貌似知道这个网站的同学很少啊。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java并发-Synchronized和Reentrantlock</title>
      <link>https://leer.moe/2019/01/07/java-concurrent-synchronized-reentrantlock/</link>
      <pubDate>Mon, 07 Jan 2019 10:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/07/java-concurrent-synchronized-reentrantlock/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Java中对线程的同步和互斥有两种方式：使用&lt;code&gt;synchronized&lt;/code&gt;关键字和使用&lt;code&gt;ReentranLock&lt;/code&gt; 。也有其他的实现比如信号量，在操作系统里也有学到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leer.moe/2019/01/06/java-concurrent-toc/&#34;&gt;Java并发-目录&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java并发-目录</title>
      <link>https://leer.moe/2019/01/06/java-concurrent-toc/</link>
      <pubDate>Sun, 06 Jan 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/06/java-concurrent-toc/</guid>
      <description>Java 并发编程笔记目录 synchronized 和 ReentrantLock AQS volatile 关键字 单线程和多线程下的ConcurrentModificationExceptio &amp;hellip;</description>
    </item>
    
    <item>
      <title>firewall-cmd 常用命令</title>
      <link>https://leer.moe/2019/01/03/firewall/</link>
      <pubDate>Thu, 03 Jan 2019 10:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/03/firewall/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在换 ss 端口的时候，发生一件神奇的事。我发现那台 VPS 只能使用2019端口，改成其他的都不行。最后（在用 &lt;code&gt;CTRL-R&lt;/code&gt; 翻以前用过的命令时，不知怎么出现&lt;code&gt;firewall-cmd&lt;/code&gt;的提示😂，太灵性了，不然我也想不到），我才意识到是我自己使用&lt;code&gt;firewall-cmd&lt;/code&gt;加了端口访问限制。好蠢。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>操作系统-复习提纲</title>
      <link>https://leer.moe/2019/01/02/os-review-map/</link>
      <pubDate>Wed, 02 Jan 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/02/os-review-map/</guid>
      <description></description>
    </item>
    
    <item>
      <title>操作系统-银行家算法</title>
      <link>https://leer.moe/2019/01/01/os-banker-algorithm/</link>
      <pubDate>Tue, 01 Jan 2019 19:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/01/os-banker-algorithm/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这篇笔记主要介绍&lt;strong&gt;死锁避免中的银行家算法&lt;/strong&gt;的实现。同样是参考书上的例子和使用&lt;a href=&#34;https://gist.github.com/LeeReindeer/a0a78d29d2940dd5a958da67f0db30e8&#34;&gt;C++实现&lt;/a&gt;的。作为新年的第一篇文章🎉，我也尝试了一些新鲜的东西，比如Markdown中数学公式，同时为算法找了两个测试用例进行测试。&lt;/p&gt;
&lt;p&gt;写文章耗时：1 hour&lt;/p&gt;
&lt;p&gt;编码：1 hour&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>操作系统-电梯调度算法</title>
      <link>https://leer.moe/2018/12/28/os-elevator-algorithm/</link>
      <pubDate>Fri, 28 Dec 2018 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/28/os-elevator-algorithm/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近在复习操作系统，老师不讲设备管理这一部分，让我们自学，期末要考&lt;strong&gt;电梯调度算法&lt;/strong&gt;。这篇文章分别用自然语言，流程图，&lt;a href=&#34;https://gist.github.com/LeeReindeer/95efbc79b18636236dca4625bb5b83d5&#34;&gt;C++语言&lt;/a&gt;来描述电梯算法，其实电梯算法真的很简单😸&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java基础-Pass by value</title>
      <link>https://leer.moe/2018/12/20/java-fun-pass-by-value/</link>
      <pubDate>Thu, 20 Dec 2018 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/20/java-fun-pass-by-value/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Java的方法参数是按值传递的，这篇主要是把Java的传值机制和C语言的指针和二重指针进行比较，并基于汇编代码更深入的理解传值和传引用。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>数据结构-Treap</title>
      <link>https://leer.moe/2018/12/17/data-structrue-treap/</link>
      <pubDate>Mon, 17 Dec 2018 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/17/data-structrue-treap/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;今天的算法课上，老师讲了一个比较有意思的数据结构：&lt;code&gt;Treap&lt;/code&gt;。它的名字就比较有意思，为什么叫&lt;code&gt;Treap&lt;/code&gt;呢？是Tree + Heap两个单词的结合，所以这个数据结构也就是二叉树和二叉堆的结合了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Treap也是平衡二叉搜索树的一种。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Balanced Binary Search Tree 也可以简称为 Balanced Search Tree，为了方便区分我下面会简称为&lt;code&gt;BBST&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java基础-ArrayList和LinkedList</title>
      <link>https://leer.moe/2018/12/17/java-fun-arraylist-linkedlist/</link>
      <pubDate>Mon, 17 Dec 2018 15:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/17/java-fun-arraylist-linkedlist/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;相对与&lt;code&gt;HashMap&lt;/code&gt;，&lt;code&gt;ArrayList&lt;/code&gt;和&lt;code&gt;LinkedList&lt;/code&gt;都算比较简单的数据结构，通过这篇文章分别的了解一下它们。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java基础-HashMap源码简析</title>
      <link>https://leer.moe/2018/12/16/java-fun-hashmap/</link>
      <pubDate>Sun, 16 Dec 2018 12:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/16/java-fun-hashmap/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;基于&lt;code&gt;HashMap&lt;/code&gt;JDK1.8中的源码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考前辈们的成果，简单的分析&lt;code&gt;HashMap&lt;/code&gt;的源码，了解一下&lt;code&gt;HashMap&lt;/code&gt;的存储结构，主要方法工作原理和线程安全这几个方面。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java基础-Object的11个方法</title>
      <link>https://leer.moe/2018/12/14/java-fun-object-method/</link>
      <pubDate>Fri, 14 Dec 2018 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/14/java-fun-object-method/</guid>
      <description>&lt;p&gt;一切从对象开始。在Java中Object类是是所有类的父类，也是根类。它一共有11个方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java基础-目录</title>
      <link>https://leer.moe/2018/12/12/java-fun-toc/</link>
      <pubDate>Wed, 12 Dec 2018 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/12/java-fun-toc/</guid>
      <description>接下来应该会写一系列Java基础的笔记吧，之前虽觉得自己已经熟悉Java，但都没有系统的做笔记和整理，而且Java也是自学的，很多知识都没有</description>
    </item>
    
    <item>
      <title>2018年</title>
      <link>https://leer.moe/2018/12/10/2018/</link>
      <pubDate>Mon, 10 Dec 2018 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/10/2018/</guid>
      <description>2018 年 1月的时候还是大二上学期，紧张的考试周。也是1月，还记得当时QQ飞车的手游刚出来；也在1月，我恋爱了，紧张感动还是憧憬？因为是异地恋之后</description>
    </item>
    
    <item>
      <title>乞丐版Vi编辑器的实现2-原始输入输出</title>
      <link>https://leer.moe/2018/12/04/write-vip-step-by-step2/</link>
      <pubDate>Tue, 04 Dec 2018 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/04/write-vip-step-by-step2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://viewsourcecode.org/snaptoken/kilo/03.rawInputAndOutput.html&#34;&gt;Raw input and output&lt;/a&gt;，讲解的顺序和原教程不同，而且省略了很多关于转义序列的说明，键位也是模仿 Vi 来实现的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一步里，主要完成的功能有读取键盘的输入，键位映射和移动光标。&lt;/p&gt;
&lt;h2 id=&#34;重构输入函数&#34;&gt;重构输入函数&lt;/h2&gt;
&lt;p&gt;为了处理更多更复杂的按键，我们需要写一个函数来专门读取键盘输入。将  step1 的代码作如下修改：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>乞丐版Vi编辑器的实现1-Raw mode</title>
      <link>https://leer.moe/2018/12/02/write-vip-step-by-step1/</link>
      <pubDate>Sun, 02 Dec 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/02/write-vip-step-by-step1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://viewsourcecode.org/snaptoken/kilo/02.enteringRawMode.html&#34;&gt;Entering raw mode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一节的内容可能比较枯燥，是一些底层的 Terminal 的属性：canonical mode，回显（echoing），键盘按键对应的 ASCII 码（可以发现一些按键不止对应一个编码，还有些按键对应的是同一个编码）和一些杂项设置&amp;hellip;通过改变这些设置，让 Terminal 进入所谓的 “raw mode”。&lt;/p&gt;
&lt;h2 id=&#34;makefile&#34;&gt;Makefile&lt;/h2&gt;
&lt;p&gt;我使用 make 来构建 VIP，因为只有两个源文件，所以 Makefile 很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;color:#008080&#34;&gt;CC&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; gcc
&lt;span style=&#34;color:#008080&#34;&gt;CFLAGS&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; -Wall -Wextra -pedantic -std&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -O3

&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; vip

&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;CC&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; vip.c -g -o vipd

&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;re&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
	make clean;make

&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
	rm -f vip vipd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CFLAGS 里使用 c99 标准；使用&lt;code&gt; -O3&lt;/code&gt;进行编译优化，主要是对内联函数进行优化；&lt;code&gt;-Wall -Wextra -pedantic &lt;/code&gt;会打印一些额外的警告，对 debug 有帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>乞丐版Vi编辑器的实现0-想法</title>
      <link>https://leer.moe/2018/12/01/write-vip-step-by-step0/</link>
      <pubDate>Sat, 01 Dec 2018 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/01/write-vip-step-by-step0/</guid>
      <description>逛 GitHub 的时候发现了一个大概几百行 C 代码实现的命令行编辑器，但是看了一些代码，感觉好垃圾。于是 Google 一下，发现一个Build Your Own Text Editor的教程</description>
    </item>
    
    <item>
      <title>CSAPP Data Lab 思路和笔记</title>
      <link>https://leer.moe/2018/11/26/csapp_data_lab/</link>
      <pubDate>Mon, 26 Nov 2018 15:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/26/csapp_data_lab/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://csapp.cs.cmu.edu/3e/labs.html&#34;&gt;Data Lab&lt;/a&gt;&lt;em&gt;[Updated 11/2/18]&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;11/2/18 新鲜出炉的 Data Lab，不同时期的 lab 内容会不一样。&lt;/p&gt;
&lt;p&gt;肝了两天还是没有全部做出来，之前很以为很简单呢（&lt;/p&gt;
&lt;p&gt;最近也终于买了 CS:APP3e 英文版，配合 CMU 的&lt;a href=&#34;https://www.bilibili.com/video/av20304787&#34;&gt;课程视频&lt;/a&gt;食用更佳。顺便可以练习英语听力和阅读，阅读已经可以流畅了，这种英文书基本看得懂，但是听力就不行（&lt;/p&gt;
&lt;p&gt;解题的思路一般会写在注释里的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;bitxor&#34;&gt;bitXor&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/*s
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; * bitXor - x^y using only ~ and &amp;amp;
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; *   Example: bitXor(4, 5) = 1
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; *   Legal ops: ~ &amp;amp;
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; *   Max ops: 14
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; *   Rating: 1
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;bitXor&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; y) {
  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 德摩根定律
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// a xor b = (~a | ~b) &amp;amp; (a | b)
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// = ~(a &amp;amp; b) &amp;amp; ~(~a &amp;amp; ~b)
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;~&lt;/span&gt;y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;~&lt;/span&gt;(x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然这题比较简单，但我还是想了好久。主要是我把这个德摩根定律忘得差不多了，记得在离散数学里讲过。&lt;/p&gt;
&lt;p&gt;利用的性质主要是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a ^ b = (~a | ~b) &amp;amp; (a | b)&lt;/li&gt;
&lt;li&gt;(~a | ~b) = ~(a &amp;amp; b)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot项目部署之开启HTTPS</title>
      <link>https://leer.moe/2018/11/16/springboot-https/</link>
      <pubDate>Fri, 16 Nov 2018 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/16/springboot-https/</guid>
      <description>迫于课设，完成了对 LightBlog 的重构，使用 Spring Boot 和 SSM 框架，今晚突然想要支持一下 HTTPS（小绿锁）。 差不多折腾了一小时，现在使用的是下面这种方案（又不是</description>
    </item>
    
    <item>
      <title>【Android 基础】学习计划</title>
      <link>https://leer.moe/2018/11/12/android_fundamental_toc/</link>
      <pubDate>Mon, 12 Nov 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/12/android_fundamental_toc/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;准备春招，重温 Android&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一篇接下来的学习计划，使用的教程是&lt;a href=&#34;https://developer.android.com/courses/fundamentals-training/toc-v2#top_of_page&#34;&gt;Google Training courses&lt;/a&gt;。基本上是按着 CodeLab 一步一步做下来，CodeLab 里用的是 Java，我用的 Kotlin 。会对期间遇到问题和编程方法进行总结，发布在 &lt;a href=&#34;https://blog.csdn.net/lreindeer363&#34;&gt;CSDN&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Spring 揭秘（二）】Spring AOP</title>
      <link>https://leer.moe/2018/11/10/spring_aop/</link>
      <pubDate>Sat, 10 Nov 2018 15:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/10/spring_aop/</guid>
      <description>&lt;h2 id=&#34;术语&#34;&gt;术语&lt;/h2&gt;
&lt;p&gt;术语不是为了限制你的设计，而是借此可以更方便的讨论和思考这个问题。这是我早上在《游戏设计要则探秘》上看的一句话，当然术语也不能华而不实，最好做到顾名思义或指出本质。&lt;/p&gt;
&lt;p&gt;在使用 AOP 之前，我们需要了解AOP涉及的相关概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JoinPint：AOP的功能模块要植入到OOP的模块中，需要知道在哪些执行点上进行植入，这些执行点就是JoinPoint。JoinPoint可以是方法的调用，字段设置，异常处理执行等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PointCut：PointCut是对JoinPoint的表现形式，可以直接用方法名，正则表达式还有特定的PointCut表述语言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advice：Advice就是横切点功能的载体。包括，Before Advice，AAfter Advice，Around Advice。这三个切入的时间不同，可顾名思义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aspect：Aspect可以理解为切面，它可以包含多个PointCut和Advice。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>【Spring 揭秘（一）】Spring Bean DI and Instantiating</title>
      <link>https://leer.moe/2018/11/10/spring_bean/</link>
      <pubDate>Sat, 10 Nov 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/10/spring_bean/</guid>
      <description>&lt;h2 id=&#34;cheatsheet&#34;&gt;cheatsheet&lt;/h2&gt;
&lt;p&gt;如果你赶时间，可以只看这一节的内容。&lt;/p&gt;
&lt;h3 id=&#34;bean-的实例化方式&#34;&gt;bean 的实例化方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;XML 配置时
&lt;ul&gt;
&lt;li&gt;工厂方法&lt;/li&gt;
&lt;li&gt;静态工厂&lt;/li&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注解方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关于注解方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@Component：可以用于注册所有bean&lt;/li&gt;
&lt;li&gt;@Repository：主要用于注册dao层的bean&lt;/li&gt;
&lt;li&gt;@Controller：主要用于注册控制层的bean&lt;/li&gt;
&lt;li&gt;@Service：主要用于注册服务层的bean&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;spring-bean-的注入方式&#34;&gt;Spring bean 的注入方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;XML配置
&lt;ul&gt;
&lt;li&gt;setter 方法注入&lt;/li&gt;
&lt;li&gt;构造函数注入&lt;/li&gt;
&lt;li&gt;工厂方法/静态工厂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注解方式注入（&lt;code&gt;@AutoWired&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Map DateTime to Java Date in MyBatis</title>
      <link>https://leer.moe/2018/11/07/mybatis_datetime/</link>
      <pubDate>Wed, 07 Nov 2018 10:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/07/mybatis_datetime/</guid>
      <description>问题 最近在用 Spring Boot 重写 LightBlog，查询到的博客的 Date 属性的日期正常，但是时间始终为 00:00:00。 resultMap 映射如下： &amp;lt;resultMap id=&amp;#34;blogMap&amp;#34; type=&amp;#34;Blog&amp;#34;&amp;gt; &amp;lt;id property=&amp;#34;blogId&amp;#34; column=&amp;#34;blog_id&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogUid&amp;#34; column=&amp;#34;blog_uid&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogTagId&amp;#34; column=&amp;#34;blog_tag_id&amp;#34;/&amp;gt;</description>
    </item>
    
    <item>
      <title>【博客事记】停用七牛云图床，更换图片链接</title>
      <link>https://leer.moe/2018/10/28/fuck_qiniu/</link>
      <pubDate>Sun, 28 Oct 2018 10:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/10/28/fuck_qiniu/</guid>
      <description>邮箱里发来一份邮件：测试域名回收通知&amp;ndash;七牛云服务，一直没在意。今天发现之前的博客里的图片全部失效了，当然这也无可厚非，毕竟免费的</description>
    </item>
    
    <item>
      <title>【瞎折腾】Hack Deepin Desktop Environment</title>
      <link>https://leer.moe/2018/10/26/hack_deepin/</link>
      <pubDate>Fri, 26 Oct 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/10/26/hack_deepin/</guid>
      <description>&lt;h2 id=&#34;我想要什么&#34;&gt;我想要什么？&lt;/h2&gt;
&lt;p&gt;初来乍到 Deepin，界面不可谓不美观。试用不久就发现一个不爽的地方，键盘快捷方式太少了，特别是没有控制窗口停靠贴标的快捷方式，根本就没有这个选项。&lt;/p&gt;
&lt;p&gt;在官方论坛里搜索一番，&lt;code&gt;deepin-wm&lt;/code&gt;的 commit message 中有一条 &lt;code&gt;:feat: support interactive tiling&lt;/code&gt;，这个新功能在&lt;a href=&#34;https://bbs.deepin.org/forum.php?mod=viewthread&amp;amp;tid=155171&#34;&gt;官方论坛&lt;/a&gt;中也有介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、当一个窗口拖到边界分屏的时候；
2、剩下的应用窗口会全部平铺展示；
3、这时候点击剩下的应用窗口，会自动放置在另一半屏幕，方便左右对比；&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Concurrent with Semaphore</title>
      <link>https://leer.moe/2018/10/18/semaphore/</link>
      <pubDate>Thu, 18 Oct 2018 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/10/18/semaphore/</guid>
      <description>&lt;h2 id=&#34;semaphore&#34;&gt;Semaphore&lt;/h2&gt;
&lt;p&gt;Dijkstra 大佬提出了一种解决不同线程之前同步和互斥问题的方法。这种方法就是 PV 操作，它基于 Semaphore（信号量）。&lt;/p&gt;
&lt;p&gt;可以把信号量简单看成一个非负整数，只能使用两种操作来改变它的值，这两种操作就是 P 和 V，用伪代码描述如下（与教材《操作系统教程》上不同，这里的&lt;a href=&#34;https://stackoverflow.com/questions/20656295/what-is-general-semaphores-range&#34;&gt;信号量不能为负值&lt;/a&gt;）。PV 操作的伪代码实现如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;P(s)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;P(s) {
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;) {
     s&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;--&lt;/span&gt;;
    } &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
     append this &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;thread&lt;/span&gt; to list;
     sleep();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V(s)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;V(s) {
    s&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (list is no empty) {
        list.pop().wakeup();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P 和 V 的执行过程都是不可打断的，并且 P 和 V 要成对的出现。这样就保证了程序不可能进入信号量为负值的状态，可以利用这个特性实现进程之间的互斥和同步。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>6.828 Homework 2:Shell</title>
      <link>https://leer.moe/2018/09/29/6.828_hw2_shell/</link>
      <pubDate>Sat, 29 Sep 2018 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/09/29/6.828_hw2_shell/</guid>
      <description>&lt;p&gt;这次的作业是实现一个简单的 shell。通过阅读 &lt;a href=&#34;https://pdos.csail.mit.edu/6.828/2018/xv6/book-rev11.pdf&#34;&gt;xv6 book&lt;/a&gt; 的第零章，基本上就可以实现题目中所说的三个功能，也是shell的基本功能：运行简单的命令，输入输出重定向，管道。&lt;/p&gt;
&lt;p&gt;题目提供的&lt;code&gt;sh.c&lt;/code&gt;已经实现了命令的解析（大概看了一下流程，大概就是个递归下降解释器吧，这次作业无需关心这个），只需要完成&lt;code&gt;runcmd&lt;/code&gt;函数中缺少的代码即可。&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;p&gt;先从 &lt;code&gt;main&lt;/code&gt; 函数看起：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt;) {
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#099&#34;&gt;100&lt;/span&gt;];
  &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; fd, r;

  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Read and run input commands.
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;while&lt;/span&gt; (getcmd(buf, &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(buf)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;) {
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (buf[&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; buf[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; buf[&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;) {
      &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Clumsy but will have to do for now.
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Chdir has no effect on the parent if run in the child.
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;      buf[strlen(buf) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// chop \n
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (chdir(buf &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;)
        fprintf(stderr, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;cannot cd %s&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;, buf &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt;);
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (fork1() &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;)
      runcmd(parsecmd(buf));
    wait(&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;r);
  }
  exit(&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 函数循环调用 &lt;code&gt;getcmd&lt;/code&gt;从 console 读取命令，对 &lt;code&gt;cd &lt;/code&gt;命令做了特别处理。之后&lt;code&gt;fork&lt;/code&gt;创建子进程，调用&lt;code&gt;parsecmd&lt;/code&gt;解析命令，再调用&lt;code&gt;runcmd&lt;/code&gt;执行得到的命令。最后调用&lt;code&gt;wait&lt;/code&gt;等待子进程结束。&lt;code&gt;main&lt;/code&gt; 的基本流程就这样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaFX与Kotlin的Main函数</title>
      <link>https://leer.moe/2018/08/02/javafx_main_kotlin/</link>
      <pubDate>Thu, 02 Aug 2018 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/08/02/javafx_main_kotlin/</guid>
      <description>&lt;p&gt;晚上想做个小应用，不想用 丑陋的&lt;code&gt;swing&lt;/code&gt;（确信）。于是试了试&lt;code&gt;JavaFX&lt;/code&gt;。MVC 模式，XML 和 &lt;code&gt;Scene Builder&lt;/code&gt;  设计 UI，设计出的 UI 颜值还高。这样一看还是比较熟悉的嘛，好像和 Android 的套路差不多。&lt;/p&gt;
&lt;p&gt;当然还是要用&lt;code&gt;Kotlin&lt;/code&gt;。不过在写&lt;code&gt;Main&lt;/code&gt;函数的时候就遇到问题了，简直气炸（&lt;/p&gt;
&lt;h2 id=&#34;三次尝试&#34;&gt;三次尝试&lt;/h2&gt;
&lt;h3 id=&#34;一&#34;&gt;一&lt;/h3&gt;
&lt;p&gt;首先，在 Java 里的代码应该是这样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;Main&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;extends&lt;/span&gt; Application &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        launch&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;args&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;没有任何问题。&lt;/p&gt;
&lt;p&gt;那么在 Kotlin 中，我首先想到的是 &lt;code&gt;Top level&lt;/code&gt; 的 Main 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) = Application.launch(*args)

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;Main&lt;/span&gt; : Application() {
	&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Foggy</title>
      <link>https://leer.moe/2018/07/26/gallery_1/</link>
      <pubDate>Thu, 26 Jul 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/07/26/gallery_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>在Microsoft Word/WPS中优雅地插入代码</title>
      <link>https://leer.moe/2018/07/19/how_to_insert_code_wps/</link>
      <pubDate>Thu, 19 Jul 2018 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/07/19/how_to_insert_code_wps/</guid>
      <description>最近课程设计做的有点多，想想从6月底开始到现在已经肝了3篇课程设计了。虽然也买了正版的 Office，但是日常使用还是 Ubuntu，所以就一直</description>
    </item>
    
    <item>
      <title>Emoji in git commit</title>
      <link>https://leer.moe/2018/06/21/gitemoji/</link>
      <pubDate>Thu, 21 Jun 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/06/21/gitemoji/</guid>
      <description>Text? Emoji? 今年早些时候，在 GitHub 上对某个开源项目贡献了一点代码。原作者（是小米的员工了）还帮着我 review code。过去几个月了还是记得很清楚。GitHub 是</description>
    </item>
    
    <item>
      <title>「只差一个程序员」</title>
      <link>https://leer.moe/2018/05/27/fuck-off/</link>
      <pubDate>Sun, 27 May 2018 08:30:00 +0000</pubDate>
      
      <guid>https://leer.moe/2018/05/27/fuck-off/</guid>
      <description>跟人聊天，该人懂一点中文，外派几年管理江苏的一家企业，聊着聊着忽然说：“我发现在中国的日常生活里，人们喜欢彼此制造困难让大家日子难过（Die</description>
    </item>
    
    <item>
      <title>LG</title>
      <link>https://leer.moe/2018/05/27/lg/</link>
      <pubDate>Sun, 27 May 2018 07:30:00 +0000</pubDate>
      
      <guid>https://leer.moe/2018/05/27/lg/</guid>
      <description>画比文字更抒情</description>
    </item>
    
    <item>
      <title>Android 四大组件：Activity</title>
      <link>https://leer.moe/2018/05/16/android-activity/</link>
      <pubDate>Wed, 16 May 2018 07:30:00 +0000</pubDate>
      
      <guid>https://leer.moe/2018/05/16/android-activity/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://developer.android.com/guide/components/activities&#34;&gt;Google 官方教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;activity-是什么&#34;&gt;Activity 是什么&lt;/h2&gt;
&lt;p&gt;Activity 是四大组件之一，每个 Activity 有一个视图，是和用户交互的地方。一个 App 可以有零到多个 Activity，&lt;strong&gt;每个 Activity 都必须在 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 清单文件中声明。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言-可怕的指针</title>
      <link>https://leer.moe/2018/03/28/pointer_in_c/</link>
      <pubDate>Wed, 28 Mar 2018 07:30:00 +0000</pubDate>
      
      <guid>https://leer.moe/2018/03/28/pointer_in_c/</guid>
      <description>&lt;h2 id=&#34;一重指针&#34;&gt;一重指针&lt;/h2&gt;
&lt;h3 id=&#34;简单使用&#34;&gt;简单使用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;a; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//defines an pointer to a, the address where a store.
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, a);
printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//here * is poiner operator, get the value of address = a.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数组指针&#34;&gt;数组指针&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组名代表数组的&lt;strong&gt;首地址&lt;/strong&gt;，二维数组名则是&lt;strong&gt;行地址&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一维数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; a[&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;};
 &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p1 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; a;
 printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, a[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;]); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//2
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*++&lt;/span&gt;p1)); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二维（多维）数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; b[&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; {{&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; ,&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;},{&lt;span style=&#34;color:#099&#34;&gt;5.&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;8&lt;/span&gt;}};
 &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p2)[&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; b; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//**A pointer** to a array of 4 integers,行地址
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p3)[&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;b; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//**A pointer** to 2d array
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; b[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;];&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//5
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p2 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//5,(*p + 1) == 一维数组b[1]的首地址
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; p2[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//5
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p2)[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//5
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Ubuntuの日本語入力方法</title>
      <link>https://leer.moe/2018/01/30/start_learn_japanese/</link>
      <pubDate>Tue, 30 Jan 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/01/30/start_learn_japanese/</guid>
      <description>&lt;h1 id=&#34;ubuntuの日本語入力方法&#34;&gt;Ubuntuの日本語入力方法&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Ubuntu 下的日语输入方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寒假准备学习一波日语（其实已经学了一星期的五十音了，背背背还是不擅长的），不过一些单词总是很熟悉的感觉，日漫看多了的缘故吧，大概日语是中文相近的语系，而且日文里也是有中文的。但也学到一下单词，比如 neko（猫(ねこ)）之前还以为只是一个普通的英文名，但是看作是日文的罗马音就是猫的意思了（。&lt;/p&gt;
&lt;p&gt;还学了很多很多单词啊，一下子和动漫里的情节剧情/主角的一两句中二的话联系起来了。&lt;/p&gt;
&lt;p&gt;那么地狱少女里的无数次的登录网站输入怨恨的人的名字，最近无聊就反反复复的看（不是重点），貌似终于对 PC 端的日语输入法(入力方法)起了兴趣。那么就安装一下吧。&lt;/p&gt;
&lt;p&gt;我用的是 fcitx,所以只需要安装一下输入方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install fcitx-anthy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装好之后重启一下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;fcitx -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Android Tree2View 3-Core Alogrithm</title>
      <link>https://leer.moe/2018/01/02/tree2view_final_report/</link>
      <pubDate>Tue, 02 Jan 2018 21:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/01/02/tree2view_final_report/</guid>
      <description>&lt;!-- # 数据结构课程设计报告 --&gt;
&lt;h2 id=&#34;目录-content&#34;&gt;目录-Content&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%9B%AE%E5%BD%95-content&#34;&gt;目录-Content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E4%BB%8B%E7%BB%8D-introduction&#34;&gt;1. 介绍-Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD-features&#34;&gt;2. 主要功能-Features&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21-%E5%8A%9F%E8%83%BD%E5%B1%95%E7%A4%BA-preview&#34;&gt;2.1 功能展示-Preview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-source-code&#34;&gt;3. 源码分析-Source-code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#31-%E6%A0%91%E7%BB%93%E6%9E%84-tree-data-structure&#34;&gt;3.1 树结构-Tree-Data-structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#32-%E4%B8%BB%E8%A6%81%E7%AE%97%E6%B3%95-alogrithm-in-tree2view&#34;&gt;3.2 主要算法-Alogrithm-in-Tree2View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#33-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-adapter-pattern-in-tree2view&#34;&gt;3.3 适配器模式-Adapter-pattern-in-Tree2View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#34-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8-fileexplorer&#34;&gt;3.4 文件管理器-FileExplorer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4%E4%BD%BF%E7%94%A8-usage&#34;&gt;4.使用-Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#41-%E4%B8%8B%E8%BD%BD&#34;&gt;4.1 下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#42-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8&#34;&gt;4.2 简单使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#43-%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8&#34;&gt;4.3 进阶使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-open-source&#34;&gt;5. Open-Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-liscense&#34;&gt;6. Liscense&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-介绍-introduction&#34;&gt;1. 介绍-Introduction&lt;/h2&gt;
&lt;p&gt;我本来是打算就做一个 Android 的文件管理器的，但是文件的结构本身就是树结构。所以才写了 &lt;code&gt;Tree2View&lt;/code&gt; 这个自定义 View。而文件管理器只是作为用这个项目实现的例子。&lt;/p&gt;
&lt;p&gt;还有另外一个原因是：在 &lt;code&gt;javax.swing.JTree&lt;/code&gt; 里是一个树状的 swing 组件，但是 &lt;code&gt;Android&lt;/code&gt; 里却没有一个内置的树状组件，所以就决定造一个。那么 talking is cheap, show me the code.开始吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Tree2View 2-Adapter in Tree2View</title>
      <link>https://leer.moe/2017/12/25/my_treeview_2_adapder/</link>
      <pubDate>Mon, 25 Dec 2017 21:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/12/25/my_treeview_2_adapder/</guid>
      <description>&lt;h2 id=&#34;适配什么---adapt-what&#34;&gt;适配什么？ - Adapt what？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;首先有必要（？）讲一下 Adapter 模式，也就是适配器模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Adapter 模式适配的是什么呢？打个很恰当的比喻（逃），电源适配器大家应该都知道，什么，其实就是充电器嘛。手机的充电器把 220v 的交流电转化成比如说 5v 的电压。所以才可以愉快的充电。适配器模式就是把本来不匹配的接口（这样用二插三插转化器做比喻是不是好点），转化为你想要的接口，Adapter 就相当于充电器了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Tree2View 1-Introduction</title>
      <link>https://leer.moe/2017/12/14/my_treeview_1/</link>
      <pubDate>Thu, 14 Dec 2017 21:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/12/14/my_treeview_1/</guid>
      <description>&lt;h1 id=&#34;tree2view&#34;&gt;Tree2View&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;See on &lt;a href=&#34;https://github.com/LeeReindeer/Tree2View&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;主要功能---features&#34;&gt;主要功能 - Features&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tree2View&lt;/th&gt;
&lt;th&gt;FileManage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;①多级分层的树结构视图&lt;/td&gt;
&lt;td&gt;基本的文件管理器布局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②记忆展开状态&lt;/td&gt;
&lt;td&gt;自动展开上次打开未关闭的目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③使用适配器设计模式，用户可自定义 TreeAdapter&lt;/td&gt;
&lt;td&gt;对不同类型的文件显示不同的Icon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④动态增删节点&lt;/td&gt;
&lt;td&gt;删除和添加文件后可自动刷新状态(To-do)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤选择模式&lt;/td&gt;
&lt;td&gt;长按节点进行文件操作(Copy, Cut, Rename, Delete)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;效果预览---preview&#34;&gt;效果预览 - Preview&lt;/h2&gt;
&lt;p&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://leer.moe/images/tree_view_product1.png&#34;&gt;
  &lt;img class=&#34;mx-auto&#34; alt=&#34;image&#34; src=&#34;https://leer.moe/images/tree_view_product1.png&#34; /&gt;
&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Kotlin 代码规范</title>
      <link>https://leer.moe/2017/11/29/android-kotlin-style-guides/</link>
      <pubDate>Wed, 29 Nov 2017 22:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/11/29/android-kotlin-style-guides/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;翻译自&lt;a href=&#34;https://android.github.io/kotlin-guides/style.html&#34;&gt;Android Kotlin Guides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;译者： &lt;a href=&#34;https://github.com/LeeReindeer&#34;&gt;LeeReindeer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转载请注明出处.This Translation is under &lt;code&gt;CC BY-NC-SA 3.0 CN&lt;/code&gt; License.&lt;/p&gt;
&lt;h1 id=&#34;android-kotlin-style-guide&#34;&gt;Android Kotlin Style guide&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Kotlin 代码规范&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E6%BA%90%E6%96%87%E4%BB%B6&#34;&gt;1.源文件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#11-%E5%91%BD%E5%90%8D&#34;&gt;1.1命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#12-%E7%BB%93%E6%9E%84&#34;&gt;1.2结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#13-%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E9%A1%BA%E5%BA%8F&#34;&gt;1.3类成员的顺序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E6%A0%BC%E5%BC%8F&#34;&gt;2.格式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21-%E5%A4%A7%E6%8B%AC%E5%8F%B7&#34;&gt;2.1大括号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22-%E5%9D%97%E7%BC%A9%E8%BF%9B&#34;&gt;2.2块缩进&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23-%E4%B8%80%E8%A1%8C%E4%B8%80%E8%AF%AD%E5%8F%A5&#34;&gt;2.3一行一语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#24-%E6%8D%A2%E8%A1%8C&#34;&gt;2.4换行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E5%91%BD%E5%90%8D&#34;&gt;3.命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E6%96%87%E6%A1%A3&#34;&gt;4.文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>标点、志愿者、动物园</title>
      <link>https://leer.moe/2017/11/17/what_a_fuck/</link>
      <pubDate>Fri, 17 Nov 2017 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/11/17/what_a_fuck/</guid>
      <description>&lt;p&gt;最近太&lt;del&gt;懒了&lt;/del&gt;忙了，快一个月没更新博客。&lt;/p&gt;
&lt;h2 id=&#34;标点&#34;&gt;标点&lt;/h2&gt;
&lt;p&gt;不过我翻了一下自己之前的 blog ，发现一个很头疼的问题-就是标点符号的问题，我之前一直是用的英文标点（不管在英文里还是中文里），实际上我书写也是用的英文标点吧，因为我句号只画一个点，而不是中文的一个圈。不想去改以前的了，以后就改为用中文标点吧。&lt;/p&gt;
&lt;p&gt;只是突然觉得中文标点配中文更美观了（大雾&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Read source code of Javac-1</title>
      <link>https://leer.moe/2017/10/21/read_javac_1/</link>
      <pubDate>Sat, 21 Oct 2017 18:46:18 +0000</pubDate>
      
      <guid>https://leer.moe/2017/10/21/read_javac_1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近发生太多不愉快的事, 还是看看源码压压惊(.这篇大概有很多错误.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-说在前面&#34;&gt;1. 说在前面&lt;/h2&gt;
&lt;p&gt;Javac 大家(只是习惯用大家)应该用的很熟悉了.想我第一次接触 java 就是从 Javac 编译第一个程序的.到了今天,我时不时也会想这到底是怎么实现的?这个想法一直挥之不去.咦,跑题了(.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;代码编译的结果是从本地机器码转变成字节码,是存储格式发展的一小步,却是编程语言发展的一大步.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话反复出现在《深入理解Java虚拟机》里.我倒是没有体会到什么发展,也可以理解为这是为了跨平台而做出的牺牲,虚拟机也为此出现.当然也有直接把 Java 源代码编译成机器码的编译器( AOT 编译器).先不管这个,从 Java 源代码到字节码到底经历了什么呢?肯定要分析处理源码的语句啊,这便是词法分析和语法分析,从而把源码变成了抽象语法树(AST).接着只要遍历语法树就得到了字节码指令流.emmm,以目前的垃圾我不可能实现的.那,先从简单的开始,这篇重点就是&lt;strong&gt;从源码验证一下Javac的编译结果&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>入坑一年啦</title>
      <link>https://leer.moe/2017/10/09/ubuntu-one-year/</link>
      <pubDate>Mon, 09 Oct 2017 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/10/09/ubuntu-one-year/</guid>
      <description>用Ubuntu一年了。感谢大佬带我入坑👏。 截图留念</description>
    </item>
    
    <item>
      <title>EFB:Receive Wechat messages on Telegram</title>
      <link>https://leer.moe/2017/10/08/wechat_to_telegram/</link>
      <pubDate>Sun, 08 Oct 2017 18:46:18 +0000</pubDate>
      
      <guid>https://leer.moe/2017/10/08/wechat_to_telegram/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you don&amp;rsquo;t want to waste time (, please close this page and read the &lt;a href=&#34;https://ehforwarderbot.readthedocs.io/en/latest/&#34;&gt;offical document&lt;/a&gt;.This Tutorial is based on EFB1.6.0,and on Ubuntu 16.04.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;负担&#34;&gt;负担&lt;/h2&gt;
&lt;p&gt;发现自己刚好有一个&lt;del&gt;闲置的&lt;/del&gt;云服务器,又不想再用微信了,国庆在家就随便玩了玩.我一直觉得过多的社交是负担,何况还要安装:QQ,Wechat之类的毒瘤社交软件.但是又不得不用(爸妈有微信,学校的通知在QQ),只要有这种想法一天,就觉得所有的社交都是无意的负担.&lt;/p&gt;
&lt;p&gt;为什么没有统一的一款软件?没有的话也可以去创造.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java垃圾收集器与内存分配策略</title>
      <link>https://leer.moe/2017/09/24/gc/</link>
      <pubDate>Sun, 24 Sep 2017 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/09/24/gc/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近在看《深入理解Java虚拟机:JVM高级特性与最佳实践》这本书,觉得有必要记录一下.
如无说明,则图片是我用&lt;a href=&#34;#&#34;&gt;Google Drawings&lt;/a&gt;制作的,  under &lt;code&gt;CC BY-NC-SA 3.0 CN&lt;/code&gt; License.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;java运行时内存&#34;&gt;Java运行时内存&lt;/h1&gt;
&lt;p&gt;先上图&lt;/p&gt;
&lt;p&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://leer.moe/images/java_runtime_mem.png&#34;&gt;
  &lt;img class=&#34;mx-auto&#34; alt=&#34;java_runtime_memory&#34; src=&#34;https://leer.moe/images/java_runtime_mem.png&#34; /&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;虽然Java中没有直接(明显)的指针操作,但是在内部的实现里用的还是指针的.在访问对象的过程中,有两种方式可以实现:&lt;strong&gt;句柄访问&lt;/strong&gt;,&lt;strong&gt;直接指针&lt;/strong&gt;.对象实际上是一个reference类型的数据,其中存储的是他自己的地址,通过句柄访问则是句柄的地址.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Java 代码规范</title>
      <link>https://leer.moe/2017/09/18/google-java-style-guide/</link>
      <pubDate>Mon, 18 Sep 2017 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/09/18/google-java-style-guide/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Translation of &lt;a href=&#34;https://google.github.io/styleguide/javaguide.html&#34;&gt;Google Java Style Guide&lt;/a&gt;,by &lt;a href=&#34;http://leezoom.xyz&#34;&gt;Lee&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;转载请注明出处.This Translation is under &lt;code&gt;CC BY-NC-SA 3.0 CN&lt;/code&gt; License.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/0B3PS61RbeCWjRHBqZFk0WjktRWs/view?usp=sharing&#34;&gt;下载pdf&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个无聊的theme</title>
      <link>https://leer.moe/2017/08/30/new-theme-shell/</link>
      <pubDate>Wed, 30 Aug 2017 18:46:18 +0000</pubDate>
      
      <guid>https://leer.moe/2017/08/30/new-theme-shell/</guid>
      <description>休息了那么久.今天无聊试了试自己的theme.目前当然是垃圾.后期完善.(立flag) 拜拜。;)对了,主题名字叫shell.顾名思义,只是个</description>
    </item>
    
    <item>
      <title>CMCC无线网络只能连接一台设备的解决</title>
      <link>https://leer.moe/2017/06/15/cmcc_wifi/</link>
      <pubDate>Thu, 15 Jun 2017 12:37:02 +0000</pubDate>
      
      <guid>https://leer.moe/2017/06/15/cmcc_wifi/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;问题:最近,或者说很早就有这个想法了.学校里的wifi:CMCC-ZJOU之类的,都只能连接一台设备.那么有没有办法,利用软件或硬件来实现一下?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>乡土中国－分崩离析的乡土社会</title>
      <link>https://leer.moe/2017/05/18/rural_in_china/</link>
      <pubDate>Thu, 18 May 2017 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/05/18/rural_in_china/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;今天读完了费孝通教授的&amp;lt;乡土中国&amp;gt;,读完警觉，书中所描绘的乡土社会，何曾不是我从小生活之地？书中一字一句也充满了学者的严谨和乡土社会的淳朴．但书中的乡土社会于今天的，已经不同了，在我看来书中所写的淳朴已经不再了．毕竟这本书成于 1947 年，距今已经 70 年了．&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>一个微信公众号的诞生（五）网页授权获取用户基本信息</title>
      <link>https://leer.moe/2017/05/14/wechat5_web_auth_to_obtain_user_info/</link>
      <pubDate>Sun, 14 May 2017 21:11:28 +0000</pubDate>
      
      <guid>https://leer.moe/2017/05/14/wechat5_web_auth_to_obtain_user_info/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;由于后期需要在微信里跳转网页将用户的openid以及其他信息和学工号绑定，所以需要在通过&lt;a href=&#34;https://mp.weixin.qq.com/wiki/4/9ac2e7b1f1d22e9e57260f6553822520.html#.E7.AC.AC.E5.9B.9B.E6.AD.A5.EF.BC.9A.E6.8B.89.E5.8F.96.E7.94.A8.E6.88.B7.E4.BF.A1.E6.81.AF.28.E9.9C.80scope.E4.B8.BA_snsapi_userinfo.29&#34;&gt;网页授权来获取用户的基本信息&lt;/a&gt;．还有&lt;a href=&#34;https://mp.weixin.qq.com/wiki/1/8a5ce6257f1d3b2afb20f83e72b72ce9.html&#34;&gt;另一种&lt;/a&gt;获取用户信息的接口是直接获取的，就无法和业务进行对接了.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>一个微信公众号的诞生（四）菜单的创建和模板消息的发送</title>
      <link>https://leer.moe/2017/05/11/wechat4_creat_menu_and_send_template_msg/</link>
      <pubDate>Thu, 11 May 2017 22:42:37 +0000</pubDate>
      
      <guid>https://leer.moe/2017/05/11/wechat4_creat_menu_and_send_template_msg/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;前面已经成功的获取了access_token，应该已经猜到，菜单的创建和模板消息的发送这两个接口，都要用到access_token．&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>一个微信公众号的诞生（三）Access Token的获取</title>
      <link>https://leer.moe/2017/05/10/wechat3_access_token/</link>
      <pubDate>Wed, 10 May 2017 22:46:24 +0000</pubDate>
      
      <guid>https://leer.moe/2017/05/10/wechat3_access_token/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;access_token是微信公众号开发中比较重要的数据，因为公众号的许多接口都要使用access_token来验证.具体请参考文档(RTFM).&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>一个微信公众号的诞生（二）公众号对接和消息的接收发送</title>
      <link>https://leer.moe/2017/05/04/wecaht2_docking_receipt_and_send/</link>
      <pubDate>Thu, 04 May 2017 12:16:48 +0000</pubDate>
      
      <guid>https://leer.moe/2017/05/04/wecaht2_docking_receipt_and_send/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;上次已经搭建好了开发环境,接着可以和微信公众号进行对接．&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>一个微信公众号的诞生（一）开发环境的搭建</title>
      <link>https://leer.moe/2017/04/20/wechat1_development_of_the_environment/</link>
      <pubDate>Thu, 20 Apr 2017 20:25:34 +0000</pubDate>
      
      <guid>https://leer.moe/2017/04/20/wechat1_development_of_the_environment/</guid>
      <description>&lt;h1 id=&#34;写在前面&#34;&gt;写在前面&lt;/h1&gt;
&lt;p&gt;最近参加一个服务外包的比赛，然后就开始了征途，试过py,之后我还是决定用熟悉一点的java.以下内容，我都是在ubuntu 16.04LTS上进行，不保证其他系统适用．(ps:我是在完成了全部功能之后写的这一系列文章，也不能算是教程了，只能算是自己对开发过程的记录)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浪潮之巅</title>
      <link>https://leer.moe/2017/03/13/peak_of_wave/</link>
      <pubDate>Mon, 13 Mar 2017 22:39:32 +0000</pubDate>
      
      <guid>https://leer.moe/2017/03/13/peak_of_wave/</guid>
      <description>一张思维导图</description>
    </item>
    
    <item>
      <title>【瞎折腾】饥荒服务器搭建</title>
      <link>https://leer.moe/2017/02/28/dst_cloud_server/</link>
      <pubDate>Tue, 28 Feb 2017 23:19:35 +0000</pubDate>
      
      <guid>https://leer.moe/2017/02/28/dst_cloud_server/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;为了愉快)的玩饥荒.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>2017年书单</title>
      <link>https://leer.moe/2017/02/13/2017-books/</link>
      <pubDate>Mon, 13 Feb 2017 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2017/02/13/2017-books/</guid>
      <description>&lt;h1 id=&#34;书单&#34;&gt;书单&lt;/h1&gt;
&lt;h2 id=&#34;january&#34;&gt;January&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 恶意&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 嫌疑人X的献身&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;february&#34;&gt;February&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 白夜行&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 浪潮之巅&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>开始</title>
      <link>https://leer.moe/2017/01/16/start/</link>
      <pubDate>Mon, 16 Jan 2017 11:46:18 +0000</pubDate>
      
      <guid>https://leer.moe/2017/01/16/start/</guid>
      <description>从高中到大学，已经一个学期了．不知道自己过的怎么样了 本站基于hexo和github page.主题用的是自己的shell主题. 学习androi</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://leer.moe/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leer.moe/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://leer.moe/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leer.moe/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
