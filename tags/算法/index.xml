<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on LeeReindeer&#39;s blog</title>
    <link>https://leer.moe/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on LeeReindeer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 13 Jul 2019 16:31:21 +0000</lastBuildDate><atom:link href="https://leer.moe/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>扫雷游戏中的算法：Union Find 和 Flood Fill</title>
      <link>https://leer.moe/post/minesweeper/</link>
      <pubDate>Sat, 13 Jul 2019 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/post/minesweeper/</guid>
      <description>&lt;p&gt;讲讲我在实现扫雷游戏时用到的算法，包括 Knuth shuffle、Union Find 和 Flood Fill。&lt;/p&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://github.com/LeeReindeer/Emoji-Mines/releases&#34;&gt;GitHub&lt;/a&gt;下载体验，&lt;em&gt;Emoji Mines&lt;/em&gt; 是一年前就完成的作品。今天把雷生成的算法改了改，游戏体验变好许多，遂又向女胖友推销自己游戏（笑&lt;/p&gt;
&lt;p&gt;在阅读之前假设你已可以熟悉扫雷的游戏规则。为了方便描述，将扫雷游戏中的方块分为：空白方块（即周围都没有雷方块的方块）、数字方块和雷方块。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>K-th 问题</title>
      <link>https://leer.moe/post/k-th/</link>
      <pubDate>Wed, 17 Apr 2019 19:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/post/k-th/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在面试的时候碰到的问题，总结一下。这类问题有以下几种形式，但本质上是一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求第 k 个最大的数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lalor/article/details/7368438&#34;&gt;从一亿个数里找出最大的一百个&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中位数，即第 n / 2 最大的数&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来以第一个问题的形式来分析和编码，即 &amp;ldquo;求第 k 个最大的数&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>操作系统-银行家算法</title>
      <link>https://leer.moe/post/os-banker-algorithm/</link>
      <pubDate>Tue, 01 Jan 2019 19:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/post/os-banker-algorithm/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这篇笔记主要介绍&lt;strong&gt;死锁避免中的银行家算法&lt;/strong&gt;的实现。同样是参考书上的例子和使用&lt;a href=&#34;https://gist.github.com/LeeReindeer/a0a78d29d2940dd5a958da67f0db30e8&#34;&gt;C++实现&lt;/a&gt;的。作为新年的第一篇文章🎉，我也尝试了一些新鲜的东西，比如Markdown中数学公式，同时为算法找了两个测试用例进行测试。&lt;/p&gt;
&lt;p&gt;写文章耗时：1 hour&lt;/p&gt;
&lt;p&gt;编码：1 hour&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>操作系统-电梯调度算法</title>
      <link>https://leer.moe/post/os-elevator-algorithm/</link>
      <pubDate>Fri, 28 Dec 2018 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/post/os-elevator-algorithm/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近在复习操作系统，老师不讲设备管理这一部分，让我们自学，期末要考&lt;strong&gt;电梯调度算法&lt;/strong&gt;。这篇文章分别用自然语言，流程图，&lt;a href=&#34;https://gist.github.com/LeeReindeer/95efbc79b18636236dca4625bb5b83d5&#34;&gt;C++语言&lt;/a&gt;来描述电梯算法，其实电梯算法真的很简单😸&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
