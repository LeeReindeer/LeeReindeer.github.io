<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on LeeReindeer&#39;s blog</title>
    <link>https://leer.moe/tags/c/</link>
    <description>Recent content in C on LeeReindeer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 04 Dec 2018 18:31:21 +0000</lastBuildDate><atom:link href="https://leer.moe/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>乞丐版Vi编辑器的实现2-原始输入输出</title>
      <link>https://leer.moe/2018/12/04/write-vip-step-by-step2/</link>
      <pubDate>Tue, 04 Dec 2018 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/04/write-vip-step-by-step2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://viewsourcecode.org/snaptoken/kilo/03.rawInputAndOutput.html&#34;&gt;Raw input and output&lt;/a&gt;，讲解的顺序和原教程不同，而且省略了很多关于转义序列的说明，键位也是模仿 Vi 来实现的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一步里，主要完成的功能有读取键盘的输入，键位映射和移动光标。&lt;/p&gt;
&lt;h2 id=&#34;重构输入函数&#34;&gt;重构输入函数&lt;/h2&gt;
&lt;p&gt;为了处理更多更复杂的按键，我们需要写一个函数来专门读取键盘输入。将  step1 的代码作如下修改：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>乞丐版Vi编辑器的实现1-Raw mode</title>
      <link>https://leer.moe/2018/12/02/write-vip-step-by-step1/</link>
      <pubDate>Sun, 02 Dec 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/02/write-vip-step-by-step1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://viewsourcecode.org/snaptoken/kilo/02.enteringRawMode.html&#34;&gt;Entering raw mode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一节的内容可能比较枯燥，是一些底层的 Terminal 的属性：canonical mode，回显（echoing），键盘按键对应的 ASCII 码（可以发现一些按键不止对应一个编码，还有些按键对应的是同一个编码）和一些杂项设置&amp;hellip;通过改变这些设置，让 Terminal 进入所谓的 “raw mode”。&lt;/p&gt;
&lt;h2 id=&#34;makefile&#34;&gt;Makefile&lt;/h2&gt;
&lt;p&gt;我使用 make 来构建 VIP，因为只有两个源文件，所以 Makefile 很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;color:#008080&#34;&gt;CC&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; gcc
&lt;span style=&#34;color:#008080&#34;&gt;CFLAGS&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; -Wall -Wextra -pedantic -std&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;c99 -O3

&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; vip

&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;CC&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; vip.c -g -o vipd

&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;re&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
	make clean;make

&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
	rm -f vip vipd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CFLAGS 里使用 c99 标准；使用&lt;code&gt; -O3&lt;/code&gt;进行编译优化，主要是对内联函数进行优化；&lt;code&gt;-Wall -Wextra -pedantic &lt;/code&gt;会打印一些额外的警告，对 debug 有帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>乞丐版Vi编辑器的实现0-想法</title>
      <link>https://leer.moe/2018/12/01/write-vip-step-by-step0/</link>
      <pubDate>Sat, 01 Dec 2018 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/12/01/write-vip-step-by-step0/</guid>
      <description>逛 GitHub 的时候发现了一个大概几百行 C 代码实现的命令行编辑器，但是看了一些代码，感觉好垃圾。于是 Google 一下，发现一个Build Your Own Text Editor的教程</description>
    </item>
    
    <item>
      <title>CSAPP Data Lab 思路和笔记</title>
      <link>https://leer.moe/2018/11/26/csapp_data_lab/</link>
      <pubDate>Mon, 26 Nov 2018 15:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/26/csapp_data_lab/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://csapp.cs.cmu.edu/3e/labs.html&#34;&gt;Data Lab&lt;/a&gt;&lt;em&gt;[Updated 11/2/18]&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;11/2/18 新鲜出炉的 Data Lab，不同时期的 lab 内容会不一样。&lt;/p&gt;
&lt;p&gt;肝了两天还是没有全部做出来，之前很以为很简单呢（&lt;/p&gt;
&lt;p&gt;最近也终于买了 CS:APP3e 英文版，配合 CMU 的&lt;a href=&#34;https://www.bilibili.com/video/av20304787&#34;&gt;课程视频&lt;/a&gt;食用更佳。顺便可以练习英语听力和阅读，阅读已经可以流畅了，这种英文书基本看得懂，但是听力就不行（&lt;/p&gt;
&lt;p&gt;解题的思路一般会写在注释里的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;bitxor&#34;&gt;bitXor&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/*s
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; * bitXor - x^y using only ~ and &amp;amp;
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; *   Example: bitXor(4, 5) = 1
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; *   Legal ops: ~ &amp;amp;
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; *   Max ops: 14
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; *   Rating: 1
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;bitXor&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; y) {
  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 德摩根定律
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// a xor b = (~a | ~b) &amp;amp; (a | b)
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// = ~(a &amp;amp; b) &amp;amp; ~(~a &amp;amp; ~b)
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;~&lt;/span&gt;y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;~&lt;/span&gt;(x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; y);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然这题比较简单，但我还是想了好久。主要是我把这个德摩根定律忘得差不多了，记得在离散数学里讲过。&lt;/p&gt;
&lt;p&gt;利用的性质主要是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a ^ b = (~a | ~b) &amp;amp; (a | b)&lt;/li&gt;
&lt;li&gt;(~a | ~b) = ~(a &amp;amp; b)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Concurrent with Semaphore</title>
      <link>https://leer.moe/2018/10/18/semaphore/</link>
      <pubDate>Thu, 18 Oct 2018 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/10/18/semaphore/</guid>
      <description>&lt;h2 id=&#34;semaphore&#34;&gt;Semaphore&lt;/h2&gt;
&lt;p&gt;Dijkstra 大佬提出了一种解决不同线程之前同步和互斥问题的方法。这种方法就是 PV 操作，它基于 Semaphore（信号量）。&lt;/p&gt;
&lt;p&gt;可以把信号量简单看成一个非负整数，只能使用两种操作来改变它的值，这两种操作就是 P 和 V，用伪代码描述如下（与教材《操作系统教程》上不同，这里的&lt;a href=&#34;https://stackoverflow.com/questions/20656295/what-is-general-semaphores-range&#34;&gt;信号量不能为负值&lt;/a&gt;）。PV 操作的伪代码实现如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;P(s)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;P(s) {
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;) {
     s&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;--&lt;/span&gt;;
    } &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
     append this &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;thread&lt;/span&gt; to list;
     sleep();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V(s)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;V(s) {
    s&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (list is no empty) {
        list.pop().wakeup();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P 和 V 的执行过程都是不可打断的，并且 P 和 V 要成对的出现。这样就保证了程序不可能进入信号量为负值的状态，可以利用这个特性实现进程之间的互斥和同步。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言-可怕的指针</title>
      <link>https://leer.moe/2018/03/28/pointer_in_c/</link>
      <pubDate>Wed, 28 Mar 2018 07:30:00 +0000</pubDate>
      
      <guid>https://leer.moe/2018/03/28/pointer_in_c/</guid>
      <description>&lt;h2 id=&#34;一重指针&#34;&gt;一重指针&lt;/h2&gt;
&lt;h3 id=&#34;简单使用&#34;&gt;简单使用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;a; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//defines an pointer to a, the address where a store.
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, a);
printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//here * is poiner operator, get the value of address = a.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数组指针&#34;&gt;数组指针&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组名代表数组的&lt;strong&gt;首地址&lt;/strong&gt;，二维数组名则是&lt;strong&gt;行地址&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一维数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; a[&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;};
 &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p1 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; a;
 printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, a[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;]); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//2
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; printf(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*++&lt;/span&gt;p1)); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二维（多维）数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; b[&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; {{&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; ,&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;},{&lt;span style=&#34;color:#099&#34;&gt;5.&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#099&#34;&gt;8&lt;/span&gt;}};
 &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p2)[&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; b; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//**A pointer** to a array of 4 integers,行地址
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p3)[&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;b; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//**A pointer** to 2d array
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; b[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;];&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//5
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p2 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//5,(*p + 1) == 一维数组b[1]的首地址
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; p2[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//5
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;p2)[&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//5
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
