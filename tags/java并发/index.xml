<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java并发 on LeeReindeer&#39;s blog</title>
    <link>https://leer.moe/tags/java%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in Java并发 on LeeReindeer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 Apr 2019 19:31:21 +0000</lastBuildDate>
    
	<atom:link href="https://leer.moe/tags/java%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AbstractQueuedSynchronizer</title>
      <link>https://leer.moe/2019/04/25/java-concurrent-aqs/</link>
      <pubDate>Thu, 25 Apr 2019 19:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/04/25/java-concurrent-aqs/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;AQS 是用来构建锁和同步工具的基本框架。本文主要基于 AQS 作者 Doug Lea 的论文*&lt;a href=&#34;http://gee.cs.oswego.edu/dl/papers/aqs.pdf&#34;&gt;The java.util.concurrent Synchronizer Framework&lt;/a&gt;* 和 JDK 1.8 的文档。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leer.moe/2019/01/06/java-concurrent-toc/&#34;&gt;Java并发-目录&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>单线程和多线程下的ConcurrentModificationException</title>
      <link>https://leer.moe/2019/03/11/concurrentmodificationexception/</link>
      <pubDate>Mon, 11 Mar 2019 22:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/03/11/concurrentmodificationexception/</guid>
      <description>这个寒假看的《Java并发编程实战》终于派上了用场，今天搬砖过程中遇到了ConcurrentModificationException，结果还是不会。之后晚上回去恶补一波，写此文章。
JCP -&amp;gt; 《Java并发编程实战》
Java并发-目录
 Single Thread  JCP 第五章：在单线程代码中也可能抛出ConcurrentModificationException。当对象直接从容器中删除而不是通过Iterator.remove来删除时，就会抛出这个异常。
 虽然ConcurrentModificationException这个异常听上去是多线程环境下出现的。但是如上面的引用，单线程里如果使用不当也会出现。
private final ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); private void iterateAndRemove() { for (Integer i : list) { if (i % 4 == 0) { list.remove(i); } } } 在使用for-each遍历列表时，实际上就是用Iterator遍历，但在删除的时候使用了list.remove()，这就造成了ArrayList中的modCount和Iterator中的modCount不相同，从而抛出异常。
解决办法也很简单，只要使用Iterator.remove就不会有异常。所以即使在单线程中也不能混用Iterator和容器中的方法。
Multi Thread 多线程的情况下，情况变得更加复杂。我们来看下面的实例代码：
public class ConcurrentModificationExceptionTest { private final ExecutorService executor = Executors.newFixedThreadPool(10); private final ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); // works  private final Runnable iteratorRunnable = () -&amp;gt; { Iterator&amp;lt;Integer&amp;gt; it = list.</description>
    </item>
    
    <item>
      <title>Java并发-Synchronized和Reentrantlock</title>
      <link>https://leer.moe/2019/01/07/java-concurrent-synchronized-reentrantlock/</link>
      <pubDate>Mon, 07 Jan 2019 10:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/07/java-concurrent-synchronized-reentrantlock/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Java中对线程的同步和互斥有两种方式：使用&lt;code&gt;synchronized&lt;/code&gt;关键字和使用&lt;code&gt;ReentranLock&lt;/code&gt; 。也有其他的实现比如信号量，在操作系统里也有学到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leer.moe/2019/01/06/java-concurrent-toc/&#34;&gt;Java并发-目录&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java并发-目录</title>
      <link>https://leer.moe/2019/01/06/java-concurrent-toc/</link>
      <pubDate>Sun, 06 Jan 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/01/06/java-concurrent-toc/</guid>
      <description> Java 并发编程笔记目录
  synchronized 和 ReentrantLock AQS volatile 关键字 单线程和多线程下的ConcurrentModificationExceptio &amp;hellip;  </description>
    </item>
    
  </channel>
</rss>