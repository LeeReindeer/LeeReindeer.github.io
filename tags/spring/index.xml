<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on LeeReindeer&#39;s blog</title>
    <link>https://leer.moe/tags/spring/</link>
    <description>Recent content in Spring on LeeReindeer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 26 Mar 2019 20:31:21 +0000</lastBuildDate><atom:link href="https://leer.moe/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Security 架构</title>
      <link>https://leer.moe/2019/03/26/spring-security-architecture/</link>
      <pubDate>Tue, 26 Mar 2019 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/03/26/spring-security-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://spring.io/guides/topicals/spring-security-architecture/&#34;&gt;Spring Security Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>JPA、Hibernate、Spring Data JPA 傻傻分不清？</title>
      <link>https://leer.moe/2019/03/09/jpa-hibernate-spring-data-jpa/</link>
      <pubDate>Sat, 09 Mar 2019 18:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2019/03/09/jpa-hibernate-spring-data-jpa/</guid>
      <description>JPA、Hibernate、Spring Data JPA 三者的联系和不同: Hibernate is a JPA implementation, while Spring Data JPA is a JPA Data Access Abstraction. With Spring Data, you may use Hibernate, Eclipse Link or any other JPA provider. 上面这张关系图展示了</description>
    </item>
    
    <item>
      <title>【Spring 揭秘（二）】Spring AOP</title>
      <link>https://leer.moe/2018/11/10/spring_aop/</link>
      <pubDate>Sat, 10 Nov 2018 15:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/10/spring_aop/</guid>
      <description>&lt;h2 id=&#34;术语&#34;&gt;术语&lt;/h2&gt;
&lt;p&gt;术语不是为了限制你的设计，而是借此可以更方便的讨论和思考这个问题。这是我早上在《游戏设计要则探秘》上看的一句话，当然术语也不能华而不实，最好做到顾名思义或指出本质。&lt;/p&gt;
&lt;p&gt;在使用 AOP 之前，我们需要了解AOP涉及的相关概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JoinPint：AOP的功能模块要植入到OOP的模块中，需要知道在哪些执行点上进行植入，这些执行点就是JoinPoint。JoinPoint可以是方法的调用，字段设置，异常处理执行等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PointCut：PointCut是对JoinPoint的表现形式，可以直接用方法名，正则表达式还有特定的PointCut表述语言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advice：Advice就是横切点功能的载体。包括，Before Advice，AAfter Advice，Around Advice。这三个切入的时间不同，可顾名思义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aspect：Aspect可以理解为切面，它可以包含多个PointCut和Advice。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>【Spring 揭秘（一）】Spring Bean DI and Instantiating</title>
      <link>https://leer.moe/2018/11/10/spring_bean/</link>
      <pubDate>Sat, 10 Nov 2018 14:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/10/spring_bean/</guid>
      <description>&lt;h2 id=&#34;cheatsheet&#34;&gt;cheatsheet&lt;/h2&gt;
&lt;p&gt;如果你赶时间，可以只看这一节的内容。&lt;/p&gt;
&lt;h3 id=&#34;bean-的实例化方式&#34;&gt;bean 的实例化方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;XML 配置时
&lt;ul&gt;
&lt;li&gt;工厂方法&lt;/li&gt;
&lt;li&gt;静态工厂&lt;/li&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注解方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关于注解方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@Component：可以用于注册所有bean&lt;/li&gt;
&lt;li&gt;@Repository：主要用于注册dao层的bean&lt;/li&gt;
&lt;li&gt;@Controller：主要用于注册控制层的bean&lt;/li&gt;
&lt;li&gt;@Service：主要用于注册服务层的bean&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;spring-bean-的注入方式&#34;&gt;Spring bean 的注入方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;XML配置
&lt;ul&gt;
&lt;li&gt;setter 方法注入&lt;/li&gt;
&lt;li&gt;构造函数注入&lt;/li&gt;
&lt;li&gt;工厂方法/静态工厂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注解方式注入（&lt;code&gt;@AutoWired&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
