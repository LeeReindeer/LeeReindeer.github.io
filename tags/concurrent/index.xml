<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrent on LeeReindeer&#39;s blog</title>
    <link>https://leer.moe/tags/concurrent/</link>
    <description>Recent content in Concurrent on LeeReindeer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 18 Oct 2018 16:31:21 +0000</lastBuildDate><atom:link href="https://leer.moe/tags/concurrent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrent with Semaphore</title>
      <link>https://leer.moe/2018/10/18/semaphore/</link>
      <pubDate>Thu, 18 Oct 2018 16:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/10/18/semaphore/</guid>
      <description>&lt;h2 id=&#34;semaphore&#34;&gt;Semaphore&lt;/h2&gt;
&lt;p&gt;Dijkstra 大佬提出了一种解决不同线程之前同步和互斥问题的方法。这种方法就是 PV 操作，它基于 Semaphore（信号量）。&lt;/p&gt;
&lt;p&gt;可以把信号量简单看成一个非负整数，只能使用两种操作来改变它的值，这两种操作就是 P 和 V，用伪代码描述如下（与教材《操作系统教程》上不同，这里的&lt;a href=&#34;https://stackoverflow.com/questions/20656295/what-is-general-semaphores-range&#34;&gt;信号量不能为负值&lt;/a&gt;）。PV 操作的伪代码实现如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;P(s)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;P(s) {
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;) {
     s&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;--&lt;/span&gt;;
    } &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
     append this &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;thread&lt;/span&gt; to list;
     sleep();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V(s)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;V(s) {
    s&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (list is no empty) {
        list.pop().wakeup();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P 和 V 的执行过程都是不可打断的，并且 P 和 V 要成对的出现。这样就保证了程序不可能进入信号量为负值的状态，可以利用这个特性实现进程之间的互斥和同步。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
