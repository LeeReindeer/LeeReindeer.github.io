<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on LeeReindeer&#39;s blog</title>
    <link>https://leer.moe/tags/spring-boot/</link>
    <description>Recent content in Spring Boot on LeeReindeer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 16 Nov 2018 20:31:21 +0000</lastBuildDate>
    
	<atom:link href="https://leer.moe/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot项目部署之开启HTTPS</title>
      <link>https://leer.moe/2018/11/16/springboot-https/</link>
      <pubDate>Fri, 16 Nov 2018 20:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/16/springboot-https/</guid>
      <description>迫于课设，完成了对 LightBlog 的重构，使用 Spring Boot 和 SSM 框架，今晚突然想要支持一下 HTTPS（小绿锁）。
 差不多折腾了一小时，现在使用的是下面这种方案（又不是不能用）。
SSL 证书 在阿里云买的域名，有赠送一年的免费SSL证书。
将证书上传到服务器里，我这里放在了/usr/local/ssl/下。
修改application.properties server.port=8443 server.ssl.key-store=/usr/local/ssl/ssl.pfx server.ssl.key-store-password=password server.ssl.keyStoreType=PKCS12 server.ssl.enabled=true 打包 jar bootJar { launchScript() } 运行 Gradle 命令：gradle bootJar，会在 build/libs下生成 jar 包。
上传到服务器 scp lightblog-java-1.2-beta.jar root@yourserver:~/ 启动 spring boot 应用 screen -S blog java -jar lightblog-java-1.2-beta.jar 现在，网站运行在端口：8443，我们想要的是直接访问：https://lightblog.xyz。所以需要一个从 https://:8443 到 https://lightblog.xyz 的映射。（HTTPS 默认端口：443）。
端口映射 我用的是firewall，也可以使用iptables。
sudo apt install firewall firewall-cmd --add-port=443/tcp firewall-cmd --add-forward-port=port=443:proto=tcp:toport=8443 通过firewall,把所以在 443端口的请求转发到 8443。
至此可爱的小绿锁终于出现了！！！
参考 记一次Spring Boot项目部署，同时支持HTTP与HTTPS、80与443权限问题</description>
    </item>
    
    <item>
      <title>Map DateTime to Java Date in MyBatis</title>
      <link>https://leer.moe/2018/11/07/mybatis_datetime/</link>
      <pubDate>Wed, 07 Nov 2018 10:31:21 +0000</pubDate>
      
      <guid>https://leer.moe/2018/11/07/mybatis_datetime/</guid>
      <description>问题 最近在用 Spring Boot 重写 LightBlog，查询到的博客的 Date 属性的日期正常，但是时间始终为 00:00:00。
resultMap 映射如下：
&amp;lt;resultMap id=&amp;#34;blogMap&amp;#34; type=&amp;#34;Blog&amp;#34;&amp;gt; &amp;lt;id property=&amp;#34;blogId&amp;#34; column=&amp;#34;blog_id&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogUid&amp;#34; column=&amp;#34;blog_uid&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogTagId&amp;#34; column=&amp;#34;blog_tag_id&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogContent&amp;#34; column=&amp;#34;blog_content&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogTime&amp;#34; column=&amp;#34;blog_time&amp;#34; javaType=&amp;#34;Date&amp;#34; jdbcType=&amp;#34;DATE&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogLike&amp;#34; column=&amp;#34;blog_like&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogUnLike&amp;#34; column=&amp;#34;blog_unlike&amp;#34;/&amp;gt; &amp;lt;result property=&amp;#34;blogComment&amp;#34; column=&amp;#34;blog_comment&amp;#34;/&amp;gt; &amp;lt;/resultMap&amp;gt; public class Blog { // only provide getter  private Long blogId; private Long blogUid; private Long blogTagId; public String blogContent; public Date blogTime; public Integer blogLike; public Integer blogUnLike; public Integer blogComment; } 既然日期是正常的，那么mapper映射应该是正常的。问题应该出在映射blogTime的语句：</description>
    </item>
    
  </channel>
</rss>