<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on LeeReindeer&#39;s blog</title>
    <link>https://leer.moe/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on LeeReindeer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 17 Apr 2019 19:31:21 +0000</lastBuildDate>
    <atom:link href="https://leer.moe/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K-th 问题</title>
      <link>https://leer.moe/2019/04/17/k-th/</link>
      <pubDate>Wed, 17 Apr 2019 19:31:21 +0000</pubDate>
      <guid>https://leer.moe/2019/04/17/k-th/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在面试的时候碰到的问题，总结一下。这类问题有以下几种形式，但本质上是一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求第 k 个最大的数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lalor/article/details/7368438&#34;&gt;从一亿个数里找出最大的一百个&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中位数，即第 n / 2 最大的数&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来以第一个问题的形式来分析和编码，即 &amp;ldquo;求第 k 个最大的数&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>数据结构-二叉树</title>
      <link>https://leer.moe/2019/03/18/binary-tree/</link>
      <pubDate>Mon, 18 Mar 2019 15:49:47 +0000</pubDate>
      <guid>https://leer.moe/2019/03/18/binary-tree/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二叉树的&lt;strong&gt;第 i 层最多有$2^{i-1}$个节点&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;深度为 h 的二叉树最多有$2^h - 1$个节点&lt;/strong&gt;。定义根节点深度为1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$n_0$(度为 0 的节点，叶子节点)，$n_1$（度为 1 的节点），$n_2$（度为 2 的节点），有 $n_0 = n_2 + 1$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;n0+n1+n2-1 = 0*n0+1*n1+2*n2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;n0 = n2+1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>数据结构-Treap</title>
      <link>https://leer.moe/2018/12/17/data-structrue-treap/</link>
      <pubDate>Mon, 17 Dec 2018 18:31:21 +0000</pubDate>
      <guid>https://leer.moe/2018/12/17/data-structrue-treap/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;今天的算法课上，老师讲了一个比较有意思的数据结构：&lt;code&gt;Treap&lt;/code&gt;。它的名字就比较有意思，为什么叫&lt;code&gt;Treap&lt;/code&gt;呢？是Tree + Heap两个单词的结合，所以这个数据结构也就是二叉树和二叉堆的结合了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Treap也是平衡二叉搜索树的一种。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Balanced Binary Search Tree 也可以简称为 Balanced Search Tree，为了方便区分我下面会简称为&lt;code&gt;BBST&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Android Tree2View 1-Introduction</title>
      <link>https://leer.moe/2017/12/14/my_treeview_1/</link>
      <pubDate>Thu, 14 Dec 2017 21:31:21 +0000</pubDate>
      <guid>https://leer.moe/2017/12/14/my_treeview_1/</guid>
      <description>&lt;h1 id=&#34;tree2view&#34;&gt;Tree2View&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;See on &lt;a href=&#34;https://github.com/LeeReindeer/Tree2View&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;主要功能---features&#34;&gt;主要功能 - Features&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tree2View&lt;/th&gt;
&lt;th&gt;FileManage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;①多级分层的树结构视图&lt;/td&gt;
&lt;td&gt;基本的文件管理器布局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②记忆展开状态&lt;/td&gt;
&lt;td&gt;自动展开上次打开未关闭的目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③使用适配器设计模式，用户可自定义 TreeAdapter&lt;/td&gt;
&lt;td&gt;对不同类型的文件显示不同的Icon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④动态增删节点&lt;/td&gt;
&lt;td&gt;删除和添加文件后可自动刷新状态(To-do)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤选择模式&lt;/td&gt;
&lt;td&gt;长按节点进行文件操作(Copy, Cut, Rename, Delete)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;效果预览---preview&#34;&gt;效果预览 - Preview&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://leer.moe/images/tree_view_product1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
